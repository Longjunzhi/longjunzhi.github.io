<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>antdPro简单介绍</title>
    <url>/2022/07/04/antdPro%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用 npm</span><br><span class="line">npm i @ant-design/pro-cli -g</span><br><span class="line"># 使用 yarn</span><br><span class="line">pro create myapp</span><br><span class="line">$ cd myapp &amp;&amp; tyarn</span><br><span class="line">// 或</span><br><span class="line">$ cd myapp &amp;&amp; npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>相关文档</p>
<p><a href="https://pro.ant.design/">antdPro官网</a><br><a href="https://procomponents.ant.design/components/">antdPro组件</a></p>
]]></content>
  </entry>
  <entry>
    <title>git知识点</title>
    <url>/2022/07/04/git%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>总结下git版本管理</p>
<ol>
<li><p>git常用命令</p>
<ol>
<li>git clone #克隆项目</li>
<li>git push #推送</li>
<li>git add #添加</li>
<li>git commit #提交</li>
<li>git checkout #切换分支</li>
<li>git pull #拉取</li>
</ol>
</li>
<li><p>要用记不住的命令</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* git reset --soft HEAD^ # 取消commit,保留修改的文件</span><br><span class="line">* git reset --hard HEAD^ # 取消commit,不保留修改的文件</span><br><span class="line">* git checkout -b shen-dev(本地分支名) origin/release_dev(远程分支名) #切换远程分支</span><br><span class="line">* git checkout . #恢复工作树文件</span><br><span class="line">* ssh-keygen -t rsa -C &quot;your_email@example.com&quot; #生成新的ssh key</span><br><span class="line">* git stash #git储藏</span><br><span class="line">* git stash list # 储藏列表</span><br><span class="line">* git stash pop # 恢复最近并删除</span><br><span class="line">* git stash drop #移除stash</span><br><span class="line">* git stash show #跟着stash名字</span><br><span class="line">* git stash clear #删除所有缓存的stash</span><br><span class="line">* git stash save #跟着stash名字</span><br><span class="line">* git update-index --assume-unchanged filenname #git 忽略已经追踪的文件</span><br><span class="line">* git update-index --no--assume-unchanged filenname #git 取消忽略已经追踪的文件</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>git的知识点</p>
</li>
<li><p>基于git的几大平台</p>
</li>
</ol>
<ul>
<li>github gitlab gitee</li>
</ul>
<ol start="5">
<li>解决问题的命令</li>
</ol>
<hr>
<p>git拉取github超时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line">git config http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>commit规范</li>
</ol>
<p>type用于说明 commit 的类别。</p>
<p>feat：新增功能<br>fix：bug 修复<br>docs：文档更新<br>style：不影响程序逻辑的代码修改(修改空白字符，格式缩进，补全缺失的分号等，没有改变代码逻辑)<br>refactor：重构代码(既没有新增功能，也没有修复 bug)<br>perf：性能, 体验优化<br>test：新增测试用例或是更新现有测试<br>build：主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交<br>ci：主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle等)的提交<br>chore：不属于以上类型的其他类，比如构建流程, 依赖管理<br>revert：回滚某个更早之前的提交</p>
<p>相关的资料链接</p>
<p><a href="https://git-scm.com/">git官网</a></p>
<p><a href="https://git-scm.com/book/zh/v2">git官方中文文档</a></p>
<p>官网下载速度慢,可以使用阿里云镜像.</p>
<p><a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">阿里云git镜像</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>go 环境的安装</title>
    <url>/2022/06/23/go%20%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>安装golang</p>
<p>1.下载地址<br><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p>
<p>2.添加环境变量<br>Go\bin 添加到Path环境变量<br>设置 go GOPROXY</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>

<p>3.配置GOROOT和GOPATH</p>
<p>GOROOT: 配置go的sdk目录<br>GOPATH: 配置go项目都要放置到这个目录之下</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go的学习路线</title>
    <url>/2022/07/10/go%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<hr>
<img src="/static/go.jpg" width="80%" />

]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>jetbrains编辑器快捷键</title>
    <url>/2022/07/22/jetbrains%E7%BC%96%E8%BE%91%E5%99%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>记录下jetbrains快捷键，提高效率。</p>
<hr>
<h3 id="【常规】"><a href="#【常规】" class="headerlink" title="【常规】"></a>【常规】</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+Shift + Enter，语句完成</span><br><span class="line">“！”，否定完成，输入表达式时按 “！”键</span><br><span class="line">Ctrl+E，最近的文件</span><br><span class="line">Ctrl+Shift+E，最近更改的文件</span><br><span class="line">Shift+Click，可以关闭文件</span><br><span class="line">Ctrl+[ OR ]，可以跑到大括号的开头与结尾</span><br><span class="line">Ctrl+F12，可以显示当前文件的结构</span><br><span class="line">Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</span><br><span class="line">Ctrl+N，可以快速打开类</span><br><span class="line">Ctrl+Shift+N，可以快速打开文件</span><br><span class="line">Alt+Q，可以看到当前方法的声明</span><br><span class="line">Ctrl+P，可以显示参数信息</span><br><span class="line">Ctrl+Shift+Insert，可以选择剪贴板内容并插入</span><br><span class="line">Alt+Insert，可以生成构造器/Getter/Setter等</span><br><span class="line">Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义</span><br><span class="line">Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</span><br><span class="line">Ctrl+Enter，导入包，自动修正</span><br><span class="line">Ctrl+Alt+L，一键格式化代码</span><br><span class="line">Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</span><br><span class="line">Ctrl+Alt+O，优化导入的类和包</span><br><span class="line">Ctrl+R，替换文本</span><br><span class="line">Ctrl+F，查找文本</span><br><span class="line">Ctrl+Shift+Space，自动补全代码</span><br><span class="line">Ctrl+空格，代码提示（与系统输入法快捷键冲突）</span><br><span class="line">Ctrl+Shift+Alt+N，查找类中的方法或变量</span><br><span class="line">Alt+Shift+C，最近的更改</span><br><span class="line">Alt+Shift+Up/Down，上/下移一行</span><br><span class="line">Shift+F6，重构 - 重命名</span><br><span class="line">Ctrl+X，删除行</span><br><span class="line">Ctrl+D，复制行</span><br><span class="line">Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）</span><br><span class="line">Ctrl+J，自动代码（例如：serr）</span><br><span class="line">Ctrl+Alt+J，用动态模板环绕</span><br><span class="line">Ctrl+H，显示类结构图（类的继承层次）</span><br><span class="line">Ctrl+Q，显示注释文档</span><br><span class="line">Alt+F1，查找代码所在位置</span><br><span class="line">Alt+1，快速打开或隐藏工程面板</span><br><span class="line">Ctrl+Alt+left/right，返回至上次浏览的位置</span><br><span class="line">Alt+left/right，切换代码视图</span><br><span class="line">Alt+Up/Down，在方法间快速移动定位</span><br><span class="line">Ctrl+Shift+Up/Down，向上/下移动语句</span><br><span class="line">F2 或 Shift+F2，高亮错误或警告快速定位</span><br><span class="line">Tab，代码标签输入完成后，按 Tab，生成代码</span><br><span class="line">Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</span><br><span class="line">Alt+F3，逐个往下查找相同文本，并高亮显示</span><br><span class="line">Ctrl+Up/Down，光标中转到第一行或最后一行下</span><br><span class="line">Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</span><br><span class="line">Ctrl+Alt+B，跳转到方法实现处</span><br><span class="line">Ctrl+Shift+Backspace，跳转到上次编辑的地方</span><br><span class="line">Ctrl+O，重写方法</span><br><span class="line">Ctrl+Alt+Space，类名自动完成</span><br><span class="line">Ctrl+Alt+Up/Down，快速跳转搜索结果</span><br><span class="line">Ctrl+Shift+J，整合两行</span><br><span class="line">Alt+F8，计算变量值</span><br><span class="line">Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</span><br><span class="line">Ctrl+Alt+Shift+V，简单粘贴</span><br><span class="line">Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</span><br><span class="line">F12，把焦点从编辑器移到最近使用的工具窗口</span><br><span class="line">Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</span><br><span class="line">Ctrl+W，可以选择单词继而语句继而行继而函数</span><br><span class="line">Ctrl+Shift+W，取消选择光标所在词</span><br><span class="line">Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</span><br><span class="line">Ctrl+I，实现方法</span><br><span class="line">Ctrl+Shift+U，大小写转化</span><br><span class="line">Ctrl+Y，删除当前行</span><br><span class="line">Shift+Enter，向下插入新行</span><br><span class="line">psvm/sout，main/System.out.println(); Ctrl+J，查看更多</span><br><span class="line">Ctrl+Shift+F，全局查找</span><br><span class="line">Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</span><br><span class="line">Ctrl+Shift+S，高级搜索</span><br><span class="line">Ctrl+U，转到父类</span><br><span class="line">Ctrl+Alt+S，打开设置对话框</span><br><span class="line">Alt+Shift+Inert，开启/关闭列选择模式</span><br><span class="line">Ctrl+Alt+Shift+S，打开当前项目/模块属性</span><br><span class="line">Ctrl+G，定位行</span><br><span class="line">Alt+Home，跳转到导航栏</span><br><span class="line">Ctrl+Enter，上插一行</span><br><span class="line">Ctrl+Backspace，按单词删除</span><br><span class="line">Ctrl+&quot;+/-&quot;，当前方法展开、折叠</span><br><span class="line">Ctrl+Shift+&quot;+/-&quot;，全部展开、折叠</span><br></pre></td></tr></table></figure>

<h3 id="【调试部分、编译】"><a href="#【调试部分、编译】" class="headerlink" title="【调试部分、编译】"></a>【调试部分、编译】</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+F2，停止</span><br><span class="line">Alt+Shift+F9，选择 Debug</span><br><span class="line">Alt+Shift+F10，选择 Run</span><br><span class="line">Ctrl+Shift+F9，编译</span><br><span class="line">Ctrl+Shift+F10，运行</span><br><span class="line">Ctrl+Shift+F8，查看断点</span><br><span class="line">F8，步过</span><br><span class="line">F7，步入</span><br><span class="line">Shift+F7，智能步入</span><br><span class="line">Shift+F8，步出</span><br><span class="line">Alt+Shift+F8，强制步过</span><br><span class="line">Alt+Shift+F7，强制步入</span><br><span class="line">Alt+F9，运行至光标处</span><br><span class="line">Ctrl+Alt+F9，强制运行至光标处</span><br><span class="line">F9，恢复程序</span><br><span class="line">Alt+F10，定位到断点</span><br><span class="line">Ctrl+F8，切换行断点</span><br><span class="line">Ctrl+F9，生成项目</span><br><span class="line">Alt+1，项目</span><br><span class="line">Alt+2，收藏</span><br><span class="line">Alt+6，TODO</span><br><span class="line">Alt+7，结构</span><br><span class="line">Ctrl+Shift+C，复制路径</span><br><span class="line">Ctrl+Alt+Shift+C，复制引用，必须选择类名</span><br><span class="line">Ctrl+Alt+Y，同步</span><br><span class="line">Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</span><br><span class="line">Shift+F12，还原默认布局</span><br><span class="line">Ctrl+Shift+F12，隐藏/恢复所有窗口</span><br><span class="line">Ctrl+F4，关闭</span><br><span class="line">Ctrl+Shift+F4，关闭活动选项卡</span><br><span class="line">Ctrl+Tab，转到下一个拆分器</span><br><span class="line">Ctrl+Shift+Tab，转到上一个拆分器</span><br></pre></td></tr></table></figure>

<h3 id="【重构】"><a href="#【重构】" class="headerlink" title="【重构】"></a>【重构】</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+Alt+Shift+T，弹出重构菜单</span><br><span class="line">Shift+F6，重命名</span><br><span class="line">F6，移动</span><br><span class="line">F5，复制</span><br><span class="line">Alt+Delete，安全删除</span><br><span class="line">Ctrl+Alt+N，内联</span><br></pre></td></tr></table></figure>

<h3 id="【查找】"><a href="#【查找】" class="headerlink" title="【查找】"></a>【查找】</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+F，查找</span><br><span class="line">Ctrl+R，替换</span><br><span class="line">F3，查找下一个</span><br><span class="line">Shift+F3，查找上一个</span><br><span class="line">Ctrl+Shift+F，在路径中查找</span><br><span class="line">Ctrl+Shift+R，在路径中替换</span><br><span class="line">Ctrl+Shift+S，搜索结构</span><br><span class="line">Ctrl+Shift+M，替换结构</span><br><span class="line">Alt+F7，查找用法</span><br><span class="line">Ctrl+Alt+F7，显示用法</span><br><span class="line">Ctrl+F7，在文件中查找用法</span><br><span class="line">Ctrl+Shift+F7，在文件中高亮显示用法</span><br></pre></td></tr></table></figure>

<h3 id="【VCS】"><a href="#【VCS】" class="headerlink" title="【VCS】"></a>【VCS】</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alt+~，VCS 操作菜单</span><br><span class="line">Ctrl+K，提交更改</span><br><span class="line">Ctrl+T，更新项目</span><br><span class="line">Ctrl+Alt+Shift+D，显示变化</span><br></pre></td></tr></table></figure>

<p>来源<br><a href="https://blog.csdn.net/qq_41289920/article/details/90750786#:~:text=JetBrains%20-%20IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB%201%20Ctrl%2BShift%20%2B%20Enter%EF%BC%8C%E8%AF%AD%E5%8F%A5%E5%AE%8C%E6%88%90,%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%209%20Ctrl%2BN%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E7%B1%BB%2010%20Ctrl%2BShift%2BN%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%20More%20items...%20">JetBrains - IDEA 常用快捷键汇总</a></p>
]]></content>
  </entry>
  <entry>
    <title>laravel多对多关联</title>
    <url>/2022/07/15/laravel%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94/</url>
    <content><![CDATA[<h3 id="model层的多对多关系"><a href="#model层的多对多关系" class="headerlink" title="model层的多对多关系"></a>model层的多对多关系</h3><p>表结构<br>要定义这种关联，需要三个数据库表： users，roles 和 role_user。role_user 表的命名是由关联的两个模型按照字母顺序来的，并且包含了 user_id 和 role_id 字段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">users</span><br><span class="line">id - integer</span><br><span class="line">name - string</span><br><span class="line"></span><br><span class="line">roles</span><br><span class="line">id - integer</span><br><span class="line">name - string</span><br><span class="line"></span><br><span class="line">role_user</span><br><span class="line">user_id - integer</span><br><span class="line">role_id - integer</span><br></pre></td></tr></table></figure>
<p>模型结构<br>多对多关联通过调用 belongsToMany 这个内部方法返回的结果来定义，例如，我们在 User 模型中定义 roles 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Models;</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 用户拥有的角色</span><br><span class="line">     */</span><br><span class="line">    public function roles()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;belongsToMany(&#x27;App\Models\Role&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦关联关系被定义后，你可以通过 roles「动态属性」获取用户角色：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$user = App\Models\User::find(1);</span><br><span class="line"></span><br><span class="line">foreach ($user-&gt;roles as $role) &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，像其它所有关联模型一样，你可以使用 roles 方法，利用链式调用对查询语句添加约束条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$roles = App\Models\User::find(1)-&gt;roles()-&gt;orderBy(&#x27;name&#x27;)-&gt;get();</span><br></pre></td></tr></table></figure>
<p>正如前面所提到的，为了确定关联连接表的表名，Eloquent 会按照字母顺序连接两个关联模型的名字。当然，你也可以不使用这种约定，传递第二个参数到 belongsToMany 方法即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return $this-&gt;belongsToMany(&#x27;App\Models\Role&#x27;, &#x27;role_user&#x27;);</span><br></pre></td></tr></table></figure>
<p>除了自定义连接表的表名，你还可以通过传递额外的参数到 belongsToMany 方法来定义该表中字段的键名。第三个参数是定义此关联的模型在连接表里的外键名，第四个参数是另一个模型在连接表里的外键名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return $this-&gt;belongsToMany(&#x27;App\Models\Role&#x27;, &#x27;role_user&#x27;, &#x27;user_id&#x27;, &#x27;role_id&#x27;);</span><br></pre></td></tr></table></figure>
<p>定义反向关联<br>要定义多对多的反向关联， 你只需要在关联模型中调用 belongsToMany 方法。我们在 Role 模型中定义 users 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Models;</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class Role extends Model</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 拥有此角色的用户</span><br><span class="line">     */</span><br><span class="line">    public function users()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;belongsToMany(&#x27;App\Models\User&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如你所见，除了引入模型为 App\Models\User 外，其它与在 User 模型中定义的完全一样。由于我们重用了 belongsToMany 方法，自定义连接表表名和自定义连接表里的键的字段名称在这里同样适用。</p>
<p>获取中间表字段<br>就如你刚才所了解的一样，多对多的关联关系需要一个中间表来提供支持， Eloquent 提供了一些有用的方法来和这张表进行交互。例如，假设我们的 User 对象关联了多个 Role 对象。在获得这些关联对象后，可以使用模型的 pivot 属性访问中间表的属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$user = App\Models\User::find(1);</span><br><span class="line"></span><br><span class="line">foreach ($user-&gt;roles as $role) &#123;</span><br><span class="line">    echo $role-&gt;pivot-&gt;created_at;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，我们获取的每个 Role 模型对象，都会被自动赋予 pivot 属性，它代表中间表的一个模型对象，并且可以像其他的 Eloquent 模型一样使用。</p>
<p>默认情况下，pivot 对象只包含两个关联模型的主键，如果你的中间表里还有其他额外字段，你必须在定义关联时明确指出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return $this-&gt;belongsToMany(&#x27;App\Models\Role&#x27;)-&gt;withPivot(&#x27;column1&#x27;, &#x27;column2&#x27;);</span><br></pre></td></tr></table></figure>
<p>如果你想让中间表自动维护 created_at 和 updated_at 时间戳，那么在定义关联时附加上 withTimestamps 方法即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return $this-&gt;belongsToMany(&#x27;App\Models\Role&#x27;)-&gt;withTimestamps();</span><br></pre></td></tr></table></figure>
<p>注意：在数据透视表上使用时间戳时，该表必须同时具有 created_at 和 updated_at 时间戳字段。</p>
<p>自定义 pivot 属性名称<br>如前所述，来自中间表的属性可以使用 pivot 属性访问。但是，你可以自由定制此属性的名称，以便更好的反应其在应用中的用途。</p>
<p>例如，如果你的应用中包含可能订阅的用户，则用户与博客之间可能存在多对多的关系。如果是这种情况，你可能希望将中间表访问器命名为 subscription 取代 pivot。这可以在定义关系时使用 as 方法完成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return $this-&gt;belongsToMany(&#x27;App\Models\Podcast&#x27;)</span><br><span class="line">                -&gt;as(&#x27;subscription&#x27;)</span><br><span class="line">                -&gt;withTimestamps();</span><br></pre></td></tr></table></figure>
<p>一旦定义完成，你可以使用自定义名称访问中间表数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$users = User::with(&#x27;podcasts&#x27;)-&gt;get();</span><br><span class="line"></span><br><span class="line">foreach ($users-&gt;flatMap-&gt;podcasts as $podcast) &#123;</span><br><span class="line">    echo $podcast-&gt;subscription-&gt;created_at;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过中间表过滤关系<br>在定义关系时，你还可以使用 wherePivot 和 wherePivotIn 方法来过滤 belongsToMany 返回的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return $this-&gt;belongsToMany(&#x27;App\Models\Role&#x27;)-&gt;wherePivot(&#x27;approved&#x27;, 1);</span><br><span class="line"></span><br><span class="line">return $this-&gt;belongsToMany(&#x27;App\Models\Role&#x27;)-&gt;wherePivotIn(&#x27;priority&#x27;, [1, 2]);</span><br><span class="line"></span><br><span class="line">return $this-&gt;belongsToMany(&#x27;App\Models\Role&#x27;)-&gt;wherePivotNotIn(&#x27;priority&#x27;, [1, 2]);</span><br></pre></td></tr></table></figure>
<p>定义中间表模型<br>如果你想定义一个自定义模型来表示关联关系中的中间表，可以在定义关联时调用 using 方法。自定义多对多中间表模型都必须扩展自 Illuminate\Database\Eloquent\Relations\Pivot 类，自定义多对多（多态）中间表模型必须继承 Illuminate\Database\Eloquent\Relations\MorphPivot 类。例如，我们在写 Role 模型的关联时，使用自定义中间表模型 RoleUser：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Models;</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class Role extends Model</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 拥有此角色的所有用户</span><br><span class="line">     */</span><br><span class="line">    public function users()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;belongsToMany(&#x27;App\Models\User&#x27;)-&gt;using(&#x27;App\Models\RoleUser&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当定义 RoleUser 模型时，我们要扩展 Pivot 类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Models;</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Relations\Pivot;</span><br><span class="line"></span><br><span class="line">class RoleUser extends Pivot</span><br><span class="line">&#123;</span><br><span class="line">    //</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以组合使用 using 和 withPivot 从中间表来检索列。例如，通过将列名传递给 withPivot 方法，就可以从 UserRole 中间表中检索出 created_by 和 updated_by 两列数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Models;</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class Role extends Model</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 拥有此角色的用户</span><br><span class="line">     */</span><br><span class="line">    public function users()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;belongsToMany(&#x27;App\Models\User&#x27;)</span><br><span class="line">                        -&gt;using(&#x27;App\Models\RoleUser&#x27;)</span><br><span class="line">                        -&gt;withPivot([</span><br><span class="line">                            &#x27;created_by&#x27;,</span><br><span class="line">                            &#x27;updated_by&#x27;,</span><br><span class="line">                        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意: Pivot 模型可能不使用 SoftDeletes 特性。 如果您需要软删除数据关联记录，请考虑将您的数据关联模型转换为实际的 Eloquent 模型。</p>
<p>带有递增 ID 的自定义中继模型<br>如果你用一个自定义的中继模型定义了多对多的关系，而且这个中继模型拥有一个自增的主键，你应当确保这个自定义中继模型类中定义了一个 incrementing 属性其值为 true。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 标识 ID 是否自增</span><br><span class="line"> *</span><br><span class="line"> * @var bool</span><br><span class="line"> */</span><br><span class="line">public $incrementing = true;</span><br></pre></td></tr></table></figure>

<p>文章来源:<br><a href="https://learnku.com/docs/laravel/8.x/eloquent-relationships/9407#000a62">https://learnku.com/docs/laravel/8.x/eloquent-relationships/9407#000a62</a></p>
]]></content>
      <categories>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>js replaceAll方法有兼容性问题(记录下坑)</title>
    <url>/2022/08/23/js-replaceAll%E6%96%B9%E6%B3%95%E6%9C%89%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>旧版本游览器不支持该写法,可以转化成</p>
<p>replace方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str = &quot;wordwordwordword&quot;;</span><br><span class="line">var strNew = str.replace(/word/g,&quot;Excel&quot;)</span><br><span class="line">strNew = replaceAll(str);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel route缓存坑</title>
    <url>/2022/07/05/laravel-route%E7%BC%93%E5%AD%98%E5%9D%91/</url>
    <content><![CDATA[<p>本地访问没有问题,到测试服务器,一直访问不了,路由错误.<br>查看route文件路由没问题</p>
<hr>
<p>最终发现是laravel路由缓存问题<br>顺便说一下,路由缓存可以大大提高路由注册的速度.<br>引用Laravel社区Wiki:<br>路由缓存会大大减少注册所有路由所需的时间。在某些情况下，路由注册的速度甚至能快上 100 倍。<br>要生成路由缓存，只需执行 artisan 命令</p>
<p>生成路由缓存命令:<br>php artisan route:cache<br>清除路由缓存命令:<br>php artisan route:clear</p>
]]></content>
      <categories>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql相关知识</title>
    <url>/2022/07/11/mysql%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="mysql优化"><a href="#mysql优化" class="headerlink" title="mysql优化"></a>mysql优化</h3><pre><code>- 目前主要是索引的优化
- 给查询的字段添加索引,主键索引,外键索引,唯一索引.
- 数据量不是特别大的时候,足够了
- explain 来查是否命中索引
- 分库分表
</code></pre>
<p>mysql基础语句</p>
<p>mysql索引</p>
<p>mysql锁</p>
<p>mysql备份</p>
<p>mysql分表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table newTable as select * oldTable where 1=0; 仅复制表结构</span><br><span class="line"></span><br><span class="line">create table newTable as select * oldTable;复制表结构和数据</span><br><span class="line"></span><br><span class="line">create table newTable as select * oldTable where a=*** and b=***;复制表结构和部分数据</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>postMan设置切换本地开发线上环境</title>
    <url>/2022/08/22/postMan%E8%AE%BE%E7%BD%AE%E5%88%87%E6%8D%A2%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h3 id="设置环境变量来实现域名和token的变化"><a href="#设置环境变量来实现域名和token的变化" class="headerlink" title="设置环境变量来实现域名和token的变化"></a>设置环境变量来实现域名和token的变化</h3><p>开发经常需要切换端口,域名,token等.</p>
<p>手动改太麻烦了</p>
<p>设置环境变量快速切换环境</p>
<p>1.添加环境如图<br><img src="/static/images/img_1.png" width="80%" /></p>
<p>2.使用变量作为token和host<br><img src="/static/images/img.png" width="80%" /></p>
<p>4.就可以快速切换环境<br><img src="/static/images/img_2.png" width="80%" /></p>
]]></content>
      <tags>
        <tag>postman 环境变量</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇文章(当然是利用githubPage和hexo搭建博客)</title>
    <url>/2022/06/22/%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="简单的介绍下好了-不做为教程"><a href="#简单的介绍下好了-不做为教程" class="headerlink" title="简单的介绍下好了,不做为教程."></a>简单的介绍下好了,不做为教程.</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><ul>
<li>git node </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>五行命令就可以本地运行Hexo博客了,就是这么简单.你学会了吗?</p>
<pre><code>hexo g 
</code></pre>
<ul>
<li>生成 public 目录,放到服务器上,就完成了自已的个人博客.</li>
</ul>
<h3 id="服务器需要钱"><a href="#服务器需要钱" class="headerlink" title="服务器需要钱?"></a>服务器需要钱?</h3><p>可以利用 githubPages | giteePages |gitlabPages<br>免费搭建自已的博客</p>
<p>本博客就是利用 githubPages</p>
<ul>
<li>域名可以自已在阿里云或者腾讯云等购买,解析到对应的网址.</li>
<li>就可以拥有自已域名的免费博客.</li>
</ul>
<h3 id="文中涉及的相关内容-官方相关资料直通车"><a href="#文中涉及的相关内容-官方相关资料直通车" class="headerlink" title="文中涉及的相关内容,官方相关资料直通车."></a>文中涉及的相关内容,官方相关资料直通车.</h3><p><a href="https://hexo.io/zh-cn/index.html">Hexo中文官网</a><br><a href="https://pages.github.com/">githubPages</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>层次划分</title>
    <url>/2022/08/17/%E5%B1%82%E6%AC%A1%E5%88%92%E5%88%86/</url>
    <content><![CDATA[<h2 id="简单思考下代码的层次感"><a href="#简单思考下代码的层次感" class="headerlink" title="简单思考下代码的层次感"></a>简单思考下代码的层次感</h2><hr>
<p>回顾自已代码,总结出太多问题了.<br>有多余的,有沉余的,也有层次不对的.<br>仅仅实现了功能.<br>好的写法也不是说多难.<br>而是好的习惯和思考及经验不足.<br>未来还是要写高质量的代码.<br>坚持规范自已的代码</p>
<p>路由–&gt;中间件–&gt;参数验证–&gt;逻辑–&gt;数据交互–&gt;前置处理—&gt;后置处理–&gt;异常处理–&gt;返回</p>
<p>代码要有条理,要高质量.<br>有层次感<br>重复代码封装<br>合理分层</p>
]]></content>
  </entry>
  <entry>
    <title>回调接口高并发</title>
    <url>/2022/07/01/%E5%9B%9E%E8%B0%83%E6%8E%A5%E5%8F%A3%E9%AB%98%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<h2 id="一次高频率请求的优化"><a href="#一次高频率请求的优化" class="headerlink" title="一次高频率请求的优化"></a>一次高频率请求的优化</h2><p>第三方平台的高频率回调事件<br>每分钟1k以上的请求<br>导致不断的502报错</p>
<p>1.首先接触laravel的频率限制,防止业务不能正常执行.<br>2.这种回调事件都是可以异步的,因此使用队列,从而快速响应请求防止连接数过多.<br>3.数据库的表索引优化<br>4.单独的容器(服务器处理回调事件)</p>
]]></content>
      <categories>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>go运行的DockerFile文件</title>
    <url>/2022/09/07/go%E8%BF%90%E8%A1%8C%E7%9A%84DockerFile%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>go的dockerFile文件</p>
<pre><code>1. /src/pxj/courseSystem 目录要修改成自已的项目目录
2. ENTRYPOINT [&quot;./courseSystem&quot;] 要修改成自已的目录
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM golang:latest</span><br><span class="line"></span><br><span class="line">ENV GO111MODULE=on \</span><br><span class="line">    CGO_ENABLED=0 \</span><br><span class="line">    GOPROXY=https://goproxy.cn,direct \</span><br><span class="line">    ENV=prod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WORKDIR $GOPATH/src/pxj/courseSystem</span><br><span class="line">COPY . $GOPATH/src/pxj/courseSystem</span><br><span class="line">RUN go build .</span><br><span class="line"></span><br><span class="line">EXPOSE 8087</span><br><span class="line">ENTRYPOINT [&quot;./courseSystem&quot;]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>docker</tag>
        <tag>dockerFile</tag>
      </tags>
  </entry>
  <entry>
    <title>计算东西(分类)</title>
    <url>/2022/09/23/%E8%AE%A1%E7%AE%97%E4%B8%9C%E8%A5%BF-%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p>思考是否需要重复的计算</p>
<p>1.如果不需要存起来</p>
<p>2.需要的才动态计算<br>    看需要的数据和时间，是否需要队列和后台执行等方案优化。</p>
<p>计算单独的模块</p>
]]></content>
  </entry>
  <entry>
    <title>科学上网</title>
    <url>/2022/09/25/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw disable \</span><br><span class="line">wget https://git.io/vpnsetup -O vpnsetup.sh &amp;&amp; sudo \</span><br><span class="line">VPN_IPSEC_PSK=&#x27;myvpn&#x27; \</span><br><span class="line">VPN_USER=&#x27;myvpn&#x27; \</span><br><span class="line">VPN_PASSWORD=&#x27;myvpn&#x27; \</span><br><span class="line">sh vpnsetup.sh</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/hwdsl2/setup-ipsec-vpn">来源</a></p>
]]></content>
  </entry>
  <entry>
    <title>goland2021.3破解</title>
    <url>/2022/12/13/goland2021-3%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="下载破解"><a href="#下载破解" class="headerlink" title="下载破解"></a>下载破解</h3><p><a href="https://pangxuejun.cn/static/zhile_agent_po.zip">zhile_agent_po.zip</a></p>
<h3 id="进入goland-bin-目录"><a href="#进入goland-bin-目录" class="headerlink" title="进入goland bin 目录"></a>进入goland bin 目录</h3><ul>
<li>打开 goland64.exe.vmoptions</li>
<li>最下方，复制-javaagent:d:/zhile_agent_po/ja-netfilter.jar</li>
<li>复制key.txt的激活码，确认。</li>
</ul>
]]></content>
      <tags>
        <tag>goland</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令</title>
    <url>/2023/06/12/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><a href="https://docs.docker.com/engine/reference/run/">docker 文档</a></p>
<p><a href="https://blog.csdn.net/qiaoshaw/article/details/117048140">csdn docker常用命令</a></p>
<p>贴两个别人的链接</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>apiPost自动获取token</title>
    <url>/2023/06/08/apiPost%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96token/</url>
    <content><![CDATA[<p>提高生产力和效率，往往是把基础的东西做好，搭建好。</p>
<p>学习永远是官方文档优先</p>
<p><a href="https://v7-wiki.apipost.cn/docs/2">ApiPost文档</a></p>
<p>环境的切换 </p>
<ul>
<li>本地</li>
<li>测试 </li>
<li>正式</li>
</ul>
<p>变量的使用</p>


<p>目录公共模块预执行脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">await $.ajax(&#123;</span><br><span class="line">&quot;url&quot;: apt.environment.getPreUrl() + &quot;/admin/login/account&quot;,</span><br><span class="line">&quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">&quot;content-type&quot;: &quot;appication/json&quot;,</span><br><span class="line">&quot;data&quot;: JSON.stringify(&#123;</span><br><span class="line">&quot;type&quot;: &quot;account&quot;,</span><br><span class="line">&quot;password&quot;: &quot;admin&quot;,</span><br><span class="line">&quot;username&quot;: &quot;admin&quot;</span><br><span class="line">&#125;),</span><br><span class="line">&quot;success&quot;: function (response) &#123;</span><br><span class="line">response = typeof response == &quot;object&quot; ? response : JSON.parse(response);</span><br><span class="line">console.log(response);</span><br><span class="line">apt.variables.set(&quot;bearerToken&quot;, response.token);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用请求参数&amp;响应值可快速生成api文档</p>
]]></content>
      <tags>
        <tag>apiPost</tag>
      </tags>
  </entry>
  <entry>
    <title>花生壳内网穿透</title>
    <url>/2023/06/08/%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<p>最近想起自已的旧笔记本，本着不浪费的原则和学习的需求。<br>放宿舍当linux服务器使用，ubuntu搭建远程数据库使用，方便。</p>
<p>花生壳 linux教程安装使用教程<br><a href="https://service.oray.com/question/11630.html">文档</a><br>下载 phddns-5.0.0-amd64.deb</p>
<p>安装：dpkg -i phddns-5.0.0-amd64.deb</p>
<p>卸载：dpkg -r phddns</p>
<p>6061端口开放</p>
<p>ufw allow 6061</p>
<p>相关命令<br>    * phddns start（启动）| status（状态）| stop（停止）|restart（重启）| reset（重置）|enable（开机自启动）|disable（关闭开机自启动）|version（版本）**</p>
<p>1、浏览器访问<a href="http://b.oray.com/">http://b.oray.com</a> ，输入花生壳Linux 5.0在安装时产生SN码与默认登录密码admin登录。</p>
<p>选择SN码登录</p>
<p>免费的只能映射两个端口：<br>    - 使用了ssh远程<br>    - mysql数据库</p>
<p>作为学习已经足够了</p>
]]></content>
      <tags>
        <tag>花生壳</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装mysql8远程访问</title>
    <url>/2023/06/08/docker%E5%AE%89%E8%A3%85mysql8%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>花生壳 内网穿透<br>用来作为自已的测试数据库</p>
<p>基本配置复制出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">sudo docker cp mysql:/etc/mysql /home/pang/soft/mysql/mysql8</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行<br>mysql.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">sudo docker run -it -d --name mysql -p 3306:3306 \</span><br><span class="line">--privileged=true \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-v /home/pang/soft/mysql/mysql8:/etc/mysql \</span><br><span class="line">-v /home/pang/soft/mysql/mysql8/logs:/logs \</span><br><span class="line">-v /home/pang/soft/mysql/mysql8/data:/var/lib/mysql \</span><br><span class="line">-v /etc/localtime:/etc/localtime mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>远程访问</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">登录mysql</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line">输入密码</span><br><span class="line"></span><br><span class="line">授权远程访问</span><br><span class="line">grant all privileges on <span class="emphasis">*.*</span> to &#x27;root&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">~~修改密码</span><br><span class="line">ALTER user &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br><span class="line">刷新数据库权限</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><a href="https://blog.csdn.net/u014576291/article/details/1058~~90286">引用文章</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>docker</tag>
        <tag>mysql8</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装RabbitMQ</title>
    <url>/2023/06/13/docker%E5%AE%89%E8%A3%85RabbitMQ/</url>
    <content><![CDATA[<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p><a href="https://rabbitmq.mr-ping.com/">RabbitMQ 中文文档</a></p>
<p>php laravel + RabbitMQ</p>
<p>go + RabbitMQ</p>
<p>python + RabbitMQ</p>
<p>相关应用</p>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>坚持学习</title>
    <url>/2023/06/19/%E5%9D%9A%E6%8C%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="坚持学习，不断提升自我，是一件特别特别特别艰难的事情。"><a href="#坚持学习，不断提升自我，是一件特别特别特别艰难的事情。" class="headerlink" title="坚持学习，不断提升自我，是一件特别特别特别艰难的事情。"></a>坚持学习，不断提升自我，是一件特别特别特别艰难的事情。</h3><p>未来</p>
<pre><code>php go python

docker k8s

机器学习、大数据分析
</code></pre>
<p>只能说不断的提升自我是一件异常艰难的事情</p>
<p>希望自已可以坚持10年</p>
]]></content>
  </entry>
  <entry>
    <title>阿里云云解析DNSapi</title>
    <url>/2023/07/18/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E8%A7%A3%E6%9E%90DNSapi/</url>
    <content><![CDATA[<p>相关资料：</p>
<ul>
<li><p><a href="https://help.aliyun.com/document_detail/2355661.html?spm=a2c4g.29726.0.0.32786527v9N04Y">阿里云云解析DNS文档</a></p>
</li>
<li><p><a href="https://next.api.aliyun.com/api-tools/sdk/Alidns?version=2015-01-09&language=go-tea">云解析openApi sdk</a></p>
</li>
<li><p><a href="https://help.aliyun.com/document_detail/116401.html?spm=a2c4g.2355661.0.0.14ee6dc8w998EX">阿里云accessKey</a></p>
</li>
</ul>
<p>go实现监听自已的电脑ip，动态解析。</p>
<ul>
<li><a href="">go仓库</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu安装docker</title>
    <url>/2023/09/05/Ubuntu%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>docker阿里云镜像加速</title>
    <url>/2023/09/06/docker%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p><a href="https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors">阿里云镜像加速器</a></p>
<p>阿里云文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置镜像加速器</span><br><span class="line">针对Docker客户端版本大于 1.10.0 的用户</span><br><span class="line"></span><br><span class="line">您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</span><br><span class="line"></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://cevlvoox.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>分类&amp;标签</title>
    <url>/2023/09/05/%E5%88%86%E7%B1%BB-%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h3 id="博客文章的分类"><a href="#博客文章的分类" class="headerlink" title="博客文章的分类"></a>博客文章的分类</h3><ul>
<li>编程语言</li>
<li>服务器</li>
<li>数据库</li>
<li>集群</li>
<li>运维</li>
<li>后端</li>
<li>前端</li>
</ul>
<h3 id="博客文章的分类下标签"><a href="#博客文章的分类下标签" class="headerlink" title="博客文章的分类下标签"></a>博客文章的分类下标签</h3><ul>
<li>编程语言分类<ul>
<li>go</li>
<li>php</li>
<li>c</li>
<li>java</li>
<li>python</li>
</ul>
</li>
<li>服务器<ul>
<li>ubuntu</li>
</ul>
</li>
<li>数据库<ul>
<li>mysql</li>
<li>redis</li>
</ul>
</li>
<li>集群<ul>
<li>k8s</li>
</ul>
</li>
<li>运维<ul>
<li>docker</li>
</ul>
</li>
<li>后端<br>* </li>
<li>前端<ul>
<li>vue</li>
<li>react</li>
<li>js</li>
<li>uniapp</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/2023/09/06/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><ul>
<li>防火墙ufw</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw allow ssh #配置允许 SSH 远程连接</span><br><span class="line">sudo ufw allow 6061 #配置允许 端口6061（花生壳）</span><br><span class="line">sudo ufw enable #启动</span><br><span class="line">sudo ufw disable #禁止</span><br><span class="line">sudo ufw status #状态</span><br><span class="line">ufw allow port_number/protocol #例如sudo ufw allow 6061/tcp</span><br><span class="line">sudo ufw allow 7100:7200/tcp # 范围端口</span><br><span class="line">sudo ufw allow 7100:7200/udp</span><br></pre></td></tr></table></figure>

<p>关联链接：<a href="https://zhuanlan.zhihu.com/p/139381645">https://zhuanlan.zhihu.com/p/139381645</a></p>
]]></content>
  </entry>
  <entry>
    <title>【Ubuntu 22.04 LTS】设置笔记本合并盖子不休眠</title>
    <url>/2023/09/05/%E3%80%90Ubuntu-22-04-LTS%E3%80%91%E8%AE%BE%E7%BD%AE%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%90%88%E5%B9%B6%E7%9B%96%E5%AD%90%E4%B8%8D%E4%BC%91%E7%9C%A0/</url>
    <content><![CDATA[<p>配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/systemd/logind.conf</span><br></pre></td></tr></table></figure>

<p>配置说明</p>
<ul>
<li>HandlePowerKey: 按下电源键后的行为，默认power off </li>
<li>HandleSleepKey: 按下挂起键后的行为，默认suspend </li>
<li>HandleHibernateKey: 按下休眠键后的行为，默认hibernate </li>
<li>HandleLidSwitch: 合上笔记本盖后的行为，默认suspend</li>
</ul>
<p>只监视带有 “power-switch” 标签的 输入设备的 key(按下按钮)/lid(合上盖子) 事件。</p>
<p>如果主机插入了一个扩展坞(docking station) 或者连接了多个显示器， 那么”合上盖子”将执行 HandleLidSwitchDocked= 动作；</p>
<p>如果主机使用外部电源， 并且 HandleLidSwitchExternalPower= 不是默认值(“ignore”)， 那么”合上盖子”将执行 HandleLidSwitchExternalPower= 动作； 否则将执行 HandleLidSwitch= 动作。</p>
<p>参数说明:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ignore(无操作),</span><br><span class="line">poweroff(关闭系统并切断电源),</span><br><span class="line">reboot(重新启动),</span><br><span class="line">halt(关闭系统但不切断电源),</span><br><span class="line">kexec(调用内核&quot;kexec&quot;函数),</span><br><span class="line">suspend(休眠到内存),</span><br><span class="line">hibernate(休眠到硬盘),</span><br><span class="line">hybrid-sleep(同时休眠到内存与硬盘),</span><br><span class="line">suspend-then-hibernate(先休眠到内存超时后再休眠到硬盘),</span><br><span class="line">lock(锁屏)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HandleLidSwitch=ignore</span><br><span class="line">HandleLidSwitch=lock</span><br><span class="line">service systemd-logind restart</span><br></pre></td></tr></table></figure>


<p>引用：<a href="https://blog.csdn.net/qq_31635851/article/details/124627990">https://blog.csdn.net/qq_31635851/article/details/124627990</a></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>github访问加速</title>
    <url>/2023/09/06/github%E8%AE%BF%E9%97%AE%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">140.82.113.3    github.com</span><br><span class="line">185.199.109.153 assets-cdn.github.com</span><br><span class="line">151.101.1.194  github.global.ssl.fastly.net</span><br><span class="line">185.199.110.154 github.githubassets.com</span><br><span class="line"></span><br><span class="line">ipconfig /flushdns #刷新dns</span><br><span class="line">解析 https://www.ipaddress.com/</span><br></pre></td></tr></table></figure>





<p>引用:<a href="https://zhuanlan.zhihu.com/p/314071453">https://zhuanlan.zhihu.com/p/314071453</a></p>
]]></content>
  </entry>
  <entry>
    <title>nginx Docker</title>
    <url>/2023/09/13/nginx-Docker/</url>
    <content><![CDATA[<p>docker nginx 挂载nginx配置文件，日志文件，ssl证书，静态网站。</p>
<p>1.第一步 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /www/nginx/conf \</span><br><span class="line">&amp;&amp; mkdir -p /www/nginx/html \</span><br><span class="line">&amp;&amp; mkdir -p /www/nginx/log </span><br></pre></td></tr></table></figure>

<p>2.第二步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成容器</span><br><span class="line">sudo docker run --name nginx -p 9001:80 -d nginx</span><br><span class="line"># 将容器nginx.conf文件复制到宿主机</span><br><span class="line">sudo docker cp nginx:/etc/nginx /www/nginx/conf</span><br><span class="line"># 将容器中的html文件夹复制到宿主机</span><br><span class="line">sudo docker cp nginx:/usr/share/nginx/html /www/nginx/html</span><br></pre></td></tr></table></figure>

<p>3.第三步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-p 443:443 \</span><br><span class="line">--name nginx \</span><br><span class="line">-v /www/nginx/conf:/etc/nginx \</span><br><span class="line">-v /www/nginx/log:/var/log/nginx \</span><br><span class="line">-v /www/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-d nginx:latest</span><br></pre></td></tr></table></figure>

<p>4.第四步<br>    vi /www/nginx/config/conf/blog.pangxuejun.cn.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前端</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name blog.pangxuejun.cn;</span><br><span class="line">    root /user/share/nginx/html/blog.pangxuejun.cn;</span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    rewrite  ^(.*)$  https://blog.pangxuejun.cn$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443  ssl;</span><br><span class="line">    server_name blog.pangxuejun.cn;</span><br><span class="line">    root /usr/share/nginx/html/blog.pangxuejun.cn;</span><br><span class="line"></span><br><span class="line">    # gzip config</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_comp_level 9;</span><br><span class="line">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"></span><br><span class="line">    ssl_certificate      /etc/nginx/cert/blog.pangxuejun.cn.pem;</span><br><span class="line">    ssl_certificate_key  /etc/nginx/cert/blog.pangxuejun.cn.key;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">后端php配置</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name blog-api.qzyyds.com;</span><br><span class="line">    rewrite  ^(.*)$  https://blog-api.pangxuejun.cn$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443  ssl;</span><br><span class="line">    server_name blog-api.pangxuejun.cn;</span><br><span class="line"></span><br><span class="line">    root /var/www/blog-api.pangxuejun.cn/public;</span><br><span class="line"></span><br><span class="line">    ssl_certificate      /etc/nginx/cert/blog-api.pangxuejun.cn.pem;</span><br><span class="line">    ssl_certificate_key  /etc/nginx/cert/blog-api.pangxuejun.cn.key;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class="line">    add_header X-Content-Type-Options &quot;nosniff&quot;;</span><br><span class="line"></span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    access_log   /var/log/nginx/blog-api.pangxuejun.cn.access.log;</span><br><span class="line">    error_log    /var/log/nginx/blog-api.pangxuejun.cn.error.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">        if (!-e $request_filename) &#123;</span><br><span class="line">                rewrite  ^(.*)$  /index.php?s=$1  last;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</span><br><span class="line">    location = /robots.txt  &#123; access_log off; log_not_found off; &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /index.php;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">       include snippets/fastcgi-php.conf;</span><br><span class="line"></span><br><span class="line">       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /\.(?!well-known).* &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方向代理</span><br><span class="line">server&#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       charset utf-8;</span><br><span class="line">       server_name blog-api.pangxuejun.cn;</span><br><span class="line">       location / &#123;</span><br><span class="line">          proxy_pass http://127.0.0.1:8000;</span><br><span class="line">          proxy_redirect default;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       charset utf-8;</span><br><span class="line">       server_name blog.pangxuejun.cn;</span><br><span class="line">       location / &#123;</span><br><span class="line">          proxy_pass http://127.0.0.1:8080;</span><br><span class="line">          proxy_redirect default;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.第五步<br>配置ssl证书/www/nginx/cert</p>
<p>参考：<a href="https://blog.csdn.net/BThinker/article/details/123507820">https://blog.csdn.net/BThinker/article/details/123507820</a></p>
]]></content>
  </entry>
  <entry>
    <title>docker 推送容器镜像</title>
    <url>/2023/10/20/docker-%E6%8E%A8%E9%80%81%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h2 id="阿里云容器镜像服务-https-cr-console-aliyun-com-cn-shenzhen-instances"><a href="#阿里云容器镜像服务-https-cr-console-aliyun-com-cn-shenzhen-instances" class="headerlink" title="阿里云容器镜像服务 https://cr.console.aliyun.com/cn-shenzhen/instances"></a>阿里云容器镜像服务 <a href="https://cr.console.aliyun.com/cn-shenzhen/instances">https://cr.console.aliyun.com/cn-shenzhen/instances</a></h2><ul>
<li>使用仓库自动构建</li>
<li>本地仓库手动构建推送</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 登录阿里云Docker Registry</span><br><span class="line">$ docker login --username=用户名 registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</span><br><span class="line"></span><br><span class="line">您可以在访问凭证页面修改凭证密码。</span><br><span class="line"></span><br><span class="line">2. 从Registry中拉取镜像</span><br><span class="line">$ docker pull registry.cn-shenzhen.aliyuncs.com:[镜像版本号]</span><br><span class="line">3. 将镜像推送到Registry</span><br><span class="line">$ docker login --username=用户名 registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">$ docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com:[镜像版本号]</span><br><span class="line">$ docker push registry.cn-shenzhen.aliyuncs.com:[镜像版本号]</span><br><span class="line">请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</span><br><span class="line"></span><br><span class="line">4. 选择合适的镜像仓库地址</span><br><span class="line">从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。</span><br><span class="line"></span><br><span class="line">如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-shenzhen.aliyuncs.com 作为Registry的域名登录。</span><br><span class="line"></span><br><span class="line">5. 示例</span><br><span class="line">使用&quot;docker tag&quot;命令重命名镜像，并将它通过专有网络地址推送至Registry。</span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">registry.aliyuncs.com/acs/agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB</span><br><span class="line">$ docker tag 37bb9c63c8b2 registry-vpc.cn-shenzhen.aliyuncs.com/acs/agent:0.7-dfb6816</span><br><span class="line">使用 &quot;docker push&quot; 命令将该镜像推送至远程。</span><br><span class="line"></span><br><span class="line">$ docker push registry-vpc.cn-shenzhen.aliyuncs.com/acs/agent:0.7-dfb6816</span><br></pre></td></tr></table></figure>

<p>构建自已的镜像 docker build -t 名称:0.0.1 .</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>配置自已域名邮箱</title>
    <url>/2023/10/20/%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B2%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1/</url>
    <content><![CDATA[<p>注册网易企业免费邮箱<br>注册腾讯企业免费邮箱<br>按操作配置域名解析</p>
<p>成功得到<br><a href="mailto:&#101;&#x6d;&#x61;&#105;&#x6c;&#x40;&#x70;&#x61;&#110;&#103;&#120;&#117;&#101;&#106;&#117;&#x6e;&#46;&#99;&#x6e;">&#101;&#x6d;&#x61;&#105;&#x6c;&#x40;&#x70;&#x61;&#110;&#103;&#120;&#117;&#101;&#106;&#117;&#x6e;&#46;&#99;&#x6e;</a><br><a href="mailto:&#112;&#97;&#x6e;&#103;&#x78;&#x75;&#x65;&#106;&#117;&#x6e;&#x40;&#x70;&#x61;&#110;&#x67;&#x78;&#117;&#101;&#106;&#117;&#110;&#46;&#99;&#110;">&#112;&#97;&#x6e;&#103;&#x78;&#x75;&#x65;&#106;&#117;&#x6e;&#x40;&#x70;&#x61;&#110;&#x67;&#x78;&#117;&#101;&#106;&#117;&#110;&#46;&#99;&#110;</a></p>
]]></content>
  </entry>
  <entry>
    <title>宝塔面板</title>
    <url>/2023/11/09/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/</url>
    <content><![CDATA[<p>安装</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Centos安装脚本</span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install<span class="emphasis">_6.0.sh &amp;&amp; sh install.sh ed8484bec</span></span><br><span class="line"><span class="emphasis">复制</span></span><br><span class="line"><span class="emphasis">Ubuntu/Deepin安装脚本</span></span><br><span class="line"><span class="emphasis">wget -O install.sh https://download.bt.cn/install/install-ubuntu_</span>6.0.sh &amp;&amp; sudo bash install.sh ed8484bec</span><br><span class="line">复制</span><br><span class="line">Debian安装脚本</span><br><span class="line">wget -O install.sh https://download.bt.cn/install/install-ubuntu<span class="emphasis">_6.0.sh &amp;&amp; bash install.sh ed8484bec</span></span><br><span class="line"><span class="emphasis">复制</span></span><br><span class="line"><span class="emphasis"></span></span><br></pre></td></tr></table></figure>

<p>支持ipv6访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo echo &#x27;::&#x27; &gt; /www/server/panel/data/ipv6.pl &amp;&amp; sudo /etc/init.d/bt restart</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>ubuntu22.04开机任务</title>
    <url>/2023/11/11/ubuntu22-04%E5%BC%80%E6%9C%BA%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>在目录/etc/init.d/目录新建脚本#<br>sudo vim /etc/init.d/startup.sh</p>
<p>Copy<br>#!/bin/bash</p>
<h1 id="Only-for-test"><a href="#Only-for-test" class="headerlink" title="Only for test"></a>Only for test</h1><p>touch /root/1.txt<br>添加执行权限#<br>sudo chmod +x /etc/init.d/startup.sh</p>
<p>添加启动脚本#<br>sudo update-rc.d startup.sh defaults 90</p>
<p>查看服务列表#<br>sudo service –status-all</p>
<p>测试是否生效#<br>Copy<br>sudo service startup.sh start</p>
<p>sudo service startup.sh stop<br>或者直接重启验证</p>
<p>删除任务#<br>sudo update-rc.d -f startup.sh remove</p>
<p>Tips：此方法只在ubuntu22.04测试可用，其他版本未验证。</p>
<p>来源：<a href="https://www.cnblogs.com/ALice1024/p/17302426.html">https://www.cnblogs.com/ALice1024/p/17302426.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>一些感悟</title>
    <url>/2024/08/28/%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[<p>人生是一件很长的事情，工作也是一样，但是生活却很短。<br>我们要做的长期主义，一直成长。<br>技术和人生都是这样。<br>并没有要求短时间有回报。<br>但是你一定要懂得持续成长。<br>程序员这件是只是人生的一个小阶段。<br>不是一生，技术是一个不断更新的过程。<br>不一定要靠语言go php 证明什么。<br>成长也是有痕迹的，学习不间断。</p>
]]></content>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置跨域</title>
    <url>/2024/09/06/nginx%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<p>不走代码配置跨域<br>使用nginx配置跨域</p>
<p>配置示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen        80;</span><br><span class="line">        server_name  demo.pangxuejun.cn;</span><br><span class="line">        root   &quot;~/public&quot;;</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Origin&#x27; &quot;*&quot; always;</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27; always;</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, OPTIONS&#x27; always;</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,authtoken&#x27; always;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>php-fpm内存跑满</title>
    <url>/2024/09/06/php-fpm%E5%86%85%E5%AD%98%E8%B7%91%E6%BB%A1/</url>
    <content><![CDATA[<p>参考文档<br><a href="https://blog.csdn.net/weixin_45526912/article/details/135149425">https://blog.csdn.net/weixin_45526912/article/details/135149425</a><br><a href="https://blog.csdn.net/guo_qiangqiang/article/details/89532660">https://blog.csdn.net/guo_qiangqiang/article/details/89532660</a><br><a href="https://zhuanlan.zhihu.com/p/405981279">https://zhuanlan.zhihu.com/p/405981279</a><br><a href="https://www.cnblogs.com/zoutong/p/13523945.html">https://www.cnblogs.com/zoutong/p/13523945.html</a></p>
<p>pm.max_children = 80</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>php-fpm内存跑满</li>
<li>laravel的afterResponse</li>
<li>接口处理耗时任务</li>
<li>导致进程没有释放</li>
<li>服务器内存不够，直接跑满所有内存。<br>request_terminate_timeout<br>优化方案<br>1、耗时任务放到队列里<br>2、合适的max_children，避免进程过多，结合服务器内存<br>3、使用opcache缓存，workman swoole 等</li>
</ol>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>24年继续深入学习</title>
    <url>/2024/09/12/24%E5%B9%B4%E7%BB%A7%E7%BB%AD%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>swoole<br>workman<br>hyperf<br>elasticsearch<br>mq<br>微服务</p>
<p>go<br>gin<br>gorm</p>
]]></content>
      <tags>
        <tag>高性能php</tag>
        <tag>es搜索引擎使用</tag>
      </tags>
  </entry>
  <entry>
    <title>think something in ai</title>
    <url>/2025/03/28/think-something-in-ai/</url>
    <content><![CDATA[<p>I am try to english this article.</p>
<p>Maybe ai more and more better in the future.</p>
<p>Special deepseek ai change the world.</p>
<p>we can do something in ai.</p>
<p>I don’t know what is the future.</p>
<p>I am try to change myself. I start to use ai to help me do something. </p>
<p>Example:<br>    code work.<br>    article write.<br>    knowledge share.<br>    etc.</p>
<p>In 2025, I think ai will be more and more better.</p>
<p>I will continue to learn code, go language, swoole, hyperf, etc.</p>
<p>high performance.</p>
]]></content>
      <tags>
        <tag>deepseek</tag>
        <tag>ai</tag>
      </tags>
  </entry>
</search>
